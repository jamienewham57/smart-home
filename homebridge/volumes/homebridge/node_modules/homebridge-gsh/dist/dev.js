"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const main_1 = require("./main");
const configPath = path.resolve(os.homedir(), '.homebridge', 'config.json');
const homebridgeConfig = fs.readJsonSync(configPath);
const pluginConfig = homebridgeConfig.platforms.find(x => x.platform === 'google-smarthome');
class Log {
    constructor(prefix) {
        this.prefix = prefix;
    }
    debug(msg) {
        this.log('DEBUG', msg);
    }
    info(msg) {
        this.log('INFO', msg);
    }
    warn(msg) {
        this.log('WARN', msg);
    }
    error(msg) {
        this.log('ERROR', msg);
    }
    log(level, msg) {
        const date = new Date();
        const output = `[${level}] [${date.toLocaleString()}] [${this.prefix}]`;
        console.log(output, msg);
    }
}
new main_1.Plugin(new Log('Google Smart Home'), pluginConfig, homebridgeConfig);
//# sourceMappingURL=dev.js.map